# Image Variables
ARG UBUNTU_MAJOR="20"
ARG CUDA_MAJOR="11"
ARG CUDA_MINOR="7"
ARG CUDA_PATCH="0"

# Base Image
FROM nvcr.io/nvidia/cuda:${CUDA_MAJOR}.${CUDA_MINOR}.${CUDA_PATCH}-devel-ubuntu${UBUNTU_MAJOR}.04

# Install Variables
ARG UBUNTU_MAJOR="20"
ARG CUDA_MAJOR="11"
ARG CUDA_MINOR="7"
ARG CUDA_PATCH="0"
ARG ZED_MAJOR="4"
ARG ZED_MINOR="0"
ARG CMAKE_VERSION="3.24.3"
ARG OPENCV_VERSION="4.8.0"
ARG TENSORFLOW_COMMIT="d5b57ca93e506df258271ea00fc29cf98383a374"
ARG TENSORFLOW_COMMIT_MD5_HASH="37abf3d45a34e11012ef60ee6dcd79e317384b62d319b6346cc2a94eb447e172"
ARG TENSORFLOW_BAZEL_VERSION="6.1.0"
ARG ABSEIL_VERSION="20230802.1"
ARG GEOLIB_VERSION="v2.3"
ARG QUILL_VERSION="v3.3.1"
ARG GTEST_VERSION="v1.14.0"
ARG TZ="America/Chicago"

# Set Labels
LABEL authors="Missouri S&T Mars Rover Design Team"
LABEL maintainer="Mars Rover Design Team <marsrover@mst.edu>"
LABEL org.opencontainers.image.source=https://github.com/missourimrdt/autonomy_software
LABEL org.opencontainers.image.licenses=GPL-3.0-only
LABEL org.opencontainers.image.version="v24.1.0"
LABEL org.opencontainers.image.description="Docker Image for Ubuntu ${UBUNTU_MAJOR}.${UBUNTU_MINOR} with CUDA ${CUDA_MAJOR}.${CUDA_MINOR}, ZED SDK ${ZED_MAJOR}.${ZED_MINOR}, OpenCV ${OPENCV_VERSION}, Quill ${QUILL_VERSION}, and Google Test ${GTEST_VERSION}."

# Set Non-Interactive Mode
ARG DEBIAN_FRONTEND=noninteractive

# Set NVIDIA Driver Enviroment Variables
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}compute,video,utility,graphics

# Set CUDA Version
RUN echo "CUDA Version ${CUDA_MAJOR}.${CUDA_MINOR}.0" > /usr/local/cuda/version.txt

# Add APT Repo for PCIe drivers and Bazel.
RUN apt update && apt install -y curl && \
    echo "deb https://packages.cloud.google.com/apt coral-edgetpu-stable main" | tee /etc/apt/sources.list.d/coral-edgetpu.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
    curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor >bazel-archive-keyring.gpg && \
    mv bazel-archive-keyring.gpg /usr/share/keyrings && \
    echo "deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list

# Install Required Ubuntu Packages
RUN apt-get update && apt-get install --no-install-recommends -y apt-utils iputils-ping \
    build-essential gdb wget less udev zstd curl sudo libgomp1 libswscale-dev \
    cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev tzdata \
    libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev tzdata net-tools \
    yasm libatlas-base-dev gfortran libpq-dev libavutil-dev libpostproc-dev \
    libxine2-dev libglew-dev libtiff5-dev zlib1g-dev cowsay locales usbutils \
    libeigen3-dev python3-dev python3-pip python3-numpy libx11-dev xauth \
    libboost-all-dev valgrind doxygen graphviz htop nano fortune fortunes \
    vim-common gasket-dkms bazel-${TENSORFLOW_BAZEL_VERSION}

# Symbolically link bazel-(version) install to /usr/bin/bazel.
RUN ln -s /usr/bin/bazel-${TENSORFLOW_BAZEL_VERSION} /usr/bin/bazel

# Install Required Python Packages and link python3 executable to python.
RUN ln -s /usr/bin/python3 /usr/bin/python && \
    python -m pip install numpy opencv-python pyopengl

# Set Timezone
RUN echo "${TZ}" > /etc/localtime && \
    echo "${TZ}" > /etc/timezone

# Install gcc/g++
RUN apt-get install  --no-install-recommends -y \
    gcc-10 g++-10 && \
    rm -rf /var/lib/apt/lists/* && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ \
    g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10

# Install CMake
COPY install-cmake.sh /tmp/
RUN if [ "${CMAKE_VERSION}" != "none" ]; then \
        chmod +x /tmp/install-cmake.sh && /tmp/install-cmake.sh ${CMAKE_VERSION}; \
    fi && \
    rm -f /tmp/install-cmake.sh

# Set Working Directory
WORKDIR /opt

# Install ZED SDK
RUN wget -q -O ZED_SDK_Linux_Ubuntu${UBUNTU_MAJOR}.run \
    https://download.stereolabs.com/zedsdk/${ZED_MAJOR}.${ZED_MINOR}/cu${CUDA_MAJOR}${CUDA_MINOR%.*}/ubuntu${UBUNTU_MAJOR} && \
    chmod +x ZED_SDK_Linux_Ubuntu${UBUNTU_MAJOR}.run ; ./ZED_SDK_Linux_Ubuntu${UBUNTU_MAJOR}.run silent skip_cuda && \
    ln -sf /lib/x86_64-linux-gnu/libusb-1.0.so.0 /usr/lib/x86_64-linux-gnu/libusb-1.0.so && \
    rm ZED_SDK_Linux_Ubuntu${UBUNTU_MAJOR}.run && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir -p /root/Documents/ZED/ && \
    sed '/#pragma message.*/d' /usr/local/zed/include/sl/Fusion.hpp

# Install OpenCV
RUN git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv.git && \
    git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv_contrib.git && \
    mkdir opencv/build && cd opencv/build && \
    cmake \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D INSTALL_C_EXAMPLES=OFF \
    -D BUILD_SHARED_LIBS=OFF \
    -D WITH_CSTRIPES=ON \
    -D WITH_OPENCL=ON \
    -D WITH_CUDA=ON \
    -D WITH_CUDNN=ON \
    -D OPENCV_DNN_CUDA=ON \
    -D ENABLE_FAST_MATH=1 \
    -D CUDA_FAST_MATH=1 \
    -D CUDA_ARCH_BIN=7.0 \
    -D WITH_TBB=ON \
    -D WITH_OPENMP=ON \
    -D WITH_IPP=ON \
    -D WITH_CUBLAS=1 \
    -D WITH_FFMPEG=ON \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules/aruco \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules/cudev \
    -D HAVE_opencv_python3=ON .. && \
    cat /proc/cpuinfo | grep "processor" | wc -l | xargs make -j && \
    make install && ldconfig && \
    cd ../.. && \
    rm -rf opencv_contrib && rm -rf opencv

# Install Tensorflow Lite from Source
RUN wget https://github.com/tensorflow/tensorflow/archive/${TENSORFLOW_COMMIT}.zip && \
    unzip ${TENSORFLOW_COMMIT}.zip && mv tensorflow-${TENSORFLOW_COMMIT} tensorflow/ && \
    mkdir tensorflow/tflite_build && cd tensorflow/tflite_build && \
    cmake ../tensorflow/lite && \
    make -j 10 && \
    make install && \
    cp /opt/tensorflow/tflite_build/libtensorflow-lite.a /usr/local/lib/ && \
    mkdir -p /usr/local/include/tensorflow/lite && cp -r /opt/tensorflow/tensorflow/lite /usr/local/include/tensorflow/ && \
    cd ../../ && \
    cp -r ./tensorflow /opt/temp && \
    rm -rf tensorflow && \
    rm -rf ${TENSORFLOW_COMMIT}.zip && \
    mv /opt/temp /opt/tensorflow

# Install Flatbuffers
RUN cd /opt/tensorflow/tflite_build/flatbuffers/ && \
    mkdir build && cd build && \
    # CXXFLAGS="${CXXFLAGS} -Wno-class-memaccess" cmake -G "Unix Makefiles" .. && \
    cmake -G "Unix Makefiles" .. && \
    make -j && \
    make install && \
    # CXXFLAGS="${CXXFLAGS} -Wclass-memaccess" && \
    cp /usr/local/lib/*flatbuffers* /usr/lib/ && \
    cd /opt

# Install Abseil-CPP
RUN git clone --depth 1 --branch ${ABSEIL_VERSION} https://github.com/abseil/abseil-cpp.git && \
    mkdir abseil-cpp/build && cd abseil-cpp/build && \
    cmake \
    -D ABSL_ENABLE_INSTALL=ON .. && \
    make -j && \
    make install && \
    cp /usr/local/lib/libabsl* /usr/lib/ && \
    cd /opt

# Install Libedgetpu
RUN git clone --depth 1 https://github.com/google-coral/libedgetpu.git && \
    cd libedgetpu && \
    sed -i 's/TENSORFLOW_COMMIT = "[^"]*"/TENSORFLOW_COMMIT = "'"$TENSORFLOW_COMMIT"'"/' ./workspace.bzl && \
    sed -i 's/TENSORFLOW_SHA256 = "[^"]*"/TENSORFLOW_SHA256 = "'"$TENSORFLOW_COMMIT_MD5_HASH"'"/' ./workspace.bzl && \
    make && \
    ./scripts/install.sh && \
    cp ./out/direct/k8/libedgetpu.so.1.0 /usr/local/lib/ && \
    ln -sf /usr/local/lib/libedgetpu.so.1.0 /usr/local/lib/libedgetpu.so && \
    mkdir -p ./tflite/public/edgetpu.h && cp ./tflite/public/edgetpu.h /usr/local/include/edgetpu/ && \
    cd /opt && \
    rm -rf libedgetpu

# Install GeographicLib from Source
RUN git clone --depth 1 --branch ${GEOLIB_VERSION} https://github.com/geographiclib/geographiclib.git && \
    mkdir geographiclib/build && \
    cd geographiclib/build && \
    cmake \
    -D CMAKE_BUILD_TYPE=Release \
    -D BUILD_SHARED_LIBS=BOTH .. && \
    make -j && \
    make install && \
    cd ../.. && \
    rm -rf geographiclib

# Install Quill from Source
RUN git clone --depth 1 --branch ${QUILL_VERSION} http://github.com/odygrd/quill.git && \
    mkdir quill/build && \
    cd quill/build && \
    cmake \ 
    -D CMAKE_BUILD_TYPE=Release .. && \
    make -j && \
    make install && \
    cd ../.. && \
    rm -rf quill

# Install Google Test from Source
RUN git clone --depth 1 --branch ${GTEST_VERSION} https://github.com/google/googletest.git && \
    mkdir googletest/build && \
    cd googletest/build && \
    cmake .. && \
    make -j && \
    make install && \
    cd ../.. && \
    rm -rf googletest

# Enable Make Threads
RUN echo 'export MAKEFLAGS=-j$(($(grep -c "^processor" /proc/cpuinfo) - 1))' >> /root/.bashrc

# Fix Perl Locale Error
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
ENV LANG en_US.UTF-8  
ENV LANGUAGE en_US:en  
ENV LC_ALL en_US.UTF-8  

# Enable Cowsay.
RUN echo '/usr/games/fortune | /usr/games/cowsay -f `ls /workspaces/Autonomy_Software/data/Cowsay_Cows/*.cow | shuf -n 1`' >> /root/.bashrc

# Clone Autonomy Software Repository
RUN git clone --recurse-submodules -j8 https://github.com/MissouriMRDT/Autonomy_Software.git

# Set Working Directory
WORKDIR /opt/Autonomy_Software/ 
