#!/bin/bash

branch="$1"

CMAKE_PATH="CMakeLists.txt"
IDENTITY_SOFTWARE_PATH="Source/Autonomy/Main/MRDTAutonomyIdentitySoftware.h"
SHELL_PATH="IncrementBuildNumbers.sh"

MASTER_MAJOR_VERSION=23
MASTER_MINOR_VERSION=0
MASTER_PATCH_VERSION=0
MASTER_BUILD_VERSION=0

MAJOR_VERSION=${MASTER_MAJOR_VERSION}
MINOR_VERSION=${MASTER_MINOR_VERSION}
PATCH_VERSION=${MASTER_PATCH_VERSION}
BUILD_VERSION=${MASTER_BUILD_VERSION}

SHELL_MAJOR="MASTER_MAJOR_VERSION="
SHELL_MINOR="MASTER_MINOR_VERSION="
SHELL_PATCH="MASTER_PATCH_VERSION="
SHELL_BUILD="MASTER_BUILD_VERSION="

IDENTITY_SOFTWARE_MAJOR="MAJOR_VERSION   "
IDENTITY_SOFTWARE_MINOR="MINOR_VERSION   "
IDENTITY_SOFTWARE_PATCH="PATCH_VERSION   "
IDENTITY_SOFTWARE_BUILD="BUILD_VERSION   "

if [ "$branch" == 'release/competition' ]; then
	### MAJOR VERSION
	OLD_MAJOR_VERSION=${MAJOR_VERSION}
	NEW_MAJOR_VERSION=$((MAJOR_VERSION+1))

	OLD_MAJOR_VERSION_BASE8=${MAJOR_VERSION}
	NEW_MAJOR_VERSION_BASE8=$((MAJOR_VERSION+1))

	if [ $OLD_MAJOR_VERSION -lt 10 ]; then
	  OLD_MAJOR_VERSION="0${OLD_MAJOR_VERSION}"
	else
	  OLD_MAJOR_VERSION="${OLD_MAJOR_VERSION}"
	fi

	if [ $NEW_MAJOR_VERSION -lt 10 ]; then
	  NEW_MAJOR_VERSION="0${NEW_MAJOR_VERSION}"
	else
	  NEW_MAJOR_VERSION="${NEW_MAJOR_VERSION}"
	fi

	REPLACE="${IDENTITY_SOFTWARE_MAJOR}${OLD_MAJOR_VERSION_BASE8}"
	NEW="${IDENTITY_SOFTWARE_MAJOR}${NEW_MAJOR_VERSION_BASE8}"
	sed -i "s/$REPLACE/$NEW/" $IDENTITY_SOFTWARE_PATH

	### MINOR VERSION
	OLD_MINOR_VERSION=${MINOR_VERSION}
	NEW_MINOR_VERSION=0

	OLD_MINOR_VERSION_BASE8=${MINOR_VERSION}
	NEW_MINOR_VERSION_BASE8=0

	if [ $OLD_MINOR_VERSION -lt 10 ]; then
	  OLD_MINOR_VERSION="0${OLD_MINOR_VERSION}"
	else
	  OLD_MINOR_VERSION="${OLD_MINOR_VERSION}"
	fi

	if [ $NEW_MINOR_VERSION -lt 10 ]; then
	  NEW_MINOR_VERSION="0${NEW_MINOR_VERSION}"
	else
	  NEW_MINOR_VERSION="${NEW_MINOR_VERSION}"
	fi

	REPLACE="${IDENTITY_SOFTWARE_MINOR}${OLD_MINOR_VERSION_BASE8}"
	NEW="${IDENTITY_SOFTWARE_MINOR}${NEW_MINOR_VERSION_BASE8}"
	sed -i "s/$REPLACE/$NEW/" $IDENTITY_SOFTWARE_PATH

	### PATCH VERSION
	OLD_PATCH_VERSION=${PATCH_VERSION}
	NEW_PATCH_VERSION=0

	OLD_PATCH_VERSION_BASE8=${PATCH_VERSION}
	NEW_PATCH_VERSION_BASE8=0

	if [ $OLD_PATCH_VERSION -lt 10 ]; then
	  OLD_PATCH_VERSION="0${OLD_PATCH_VERSION}"
	else
	  OLD_PATCH_VERSION="${OLD_PATCH_VERSION}"
	fi

	if [ $NEW_PATCH_VERSION -lt 10 ]; then
	  NEW_PATCH_VERSION="0${NEW_PATCH_VERSION}"
	else
	  NEW_PATCH_VERSION="{NEW_PATCH_VERSION}"
	fi

	REPLACE="${IDENTITY_SOFTWARE_PATCH}${OLD_PATCH_VERSION_BASE8}"
	NEW="${IDENTITY_SOFTWARE_PATCH}${NEW_PATCH_VERSION_BASE8}"
	sed -i "s/$REPLACE/$NEW/" $IDENTITY_SOFTWARE_PATH

	### BUILD VERSION
	OLD_BUILD_VERSION=${BUILD_VERSION}
	NEW_BUILD_VERSION=$((BUILD_VERSION+1))

	OLD_BUILD_VERSION_BASE8=${BUILD_VERSION}
	NEW_BUILD_VERSION_BASE8=$((BUILD_VERSION+1))

	if [ $OLD_BUILD_VERSION -lt 10 ]; then
	  OLD_BUILD_VERSION="00${OLD_BUILD_VERSION}"
	elif [ $OLD_BUILD_VERSION -lt 100 ]; then
	  OLD_BUILD_VERSION="0${OLD_BUILD_VERSION}"
	else
	  OLD_BUILD_VERSION="${OLD_BUILD_VERSION}"
	fi

	if [ $NEW_BUILD_VERSION -lt 10 ]; then
	  NEW_BUILD_VERSION="00${NEW_BUILD_VERSION}"
	elif [ $NEW_BUILD_VERSION -lt 100 ]; then
	  NEW_BUILD_VERSION="0${NEW_BUILD_VERSION}"
	else
	  NEW_BUILD_VERSION="${NEW_BUILD_VERSION}"
	fi

	REPLACE="${IDENTITY_SOFTWARE_BUILD}${OLD_BUILD_VERSION_BASE8}"
	NEW="${IDENTITY_SOFTWARE_BUILD}${NEW_BUILD_VERSION_BASE8}"
	sed -i "s/$REPLACE/$NEW/" $IDENTITY_SOFTWARE_PATH

	### CMAKE VERSION
	REPLACE="v${OLD_MAJOR_VERSION}.${OLD_MINOR_VERSION}.${OLD_PATCH_VERSION} Build ${OLD_BUILD_VERSION}"
	NEW="v${NEW_MAJOR_VERSION}.${NEW_MINOR_VERSION}.${NEW_PATCH_VERSION} Build ${NEW_BUILD_VERSION}"
	sed -i "s/$REPLACE/$NEW/" $CMAKE_PATH

	REPLACE="PROJECT('Autonomy_Software' VERSION ${OLD_MAJOR_VERSION}.${OLD_MINOR_VERSION}.${OLD_PATCH_VERSION})"
	NEW="PROJECT('Autonomy_Software' VERSION ${NEW_MAJOR_VERSION}.${NEW_MINOR_VERSION}.${NEW_PATCH_VERSION})"
	sed -i "s/$REPLACE/$NEW/" $CMAKE_PATH

	### SHELL VERSION
	REPLACE="${SHELL_MAJOR}${OLD_MAJOR_VERSION_BASE8}"
	NEW="${SHELL_MAJOR}${NEW_MAJOR_VERSION_BASE8}"
	sed -i "s/$REPLACE/$NEW/" $SHELL_PATH

	REPLACE="${SHELL_MINOR}${OLD_MINOR_VERSION_BASE8}"
	NEW="${SHELL_MINOR}${NEW_MINOR_VERSION_BASE8}"
	sed -i "s/$REPLACE/$NEW/" $SHELL_PATH

	REPLACE="${SHELL_PATCH}${OLD_PATCH_VERSION_BASE8}"
	NEW="${SHELL_PATCH}${NEW_PATCH_VERSION_BASE8}"
	sed -i "s/$REPLACE/$NEW/" $SHELL_PATH

	REPLACE="${SHELL_BUILD}${OLD_BUILD_VERSION_BASE8}"
	NEW="${SHELL_BUILD}${NEW_BUILD_VERSION_BASE8}"
	sed -i "s/$REPLACE/$NEW/" $SHELL_PATH

elif [ "$branch" == 'release/candidate' ]; then
  ### MAJOR VERSION
  OLD_MAJOR_VERSION=${MAJOR_VERSION}
  NEW_MAJOR_VERSION=${MAJOR_VERSION}

  OLD_MAJOR_VERSION_BASE8=${MAJOR_VERSION}
  NEW_MAJOR_VERSION_BASE8=$((MAJOR_VERSION))

  if [ $OLD_MAJOR_VERSION -lt 10 ]; then
	OLD_MAJOR_VERSION="0${OLD_MAJOR_VERSION}"
  else
	OLD_MAJOR_VERSION="${OLD_MAJOR_VERSION}"
  fi

  if [ $NEW_MAJOR_VERSION -lt 10 ]; then
	NEW_MAJOR_VERSION="0${NEW_MAJOR_VERSION}"
  else
	NEW_MAJOR_VERSION="${NEW_MAJOR_VERSION}"
  fi

  ### MINOR VERSION
  OLD_MINOR_VERSION=${MINOR_VERSION}
  NEW_MINOR_VERSION=$((MINOR_VERSION+1))

  OLD_MINOR_VERSION_BASE8=${MINOR_VERSION}
  NEW_MINOR_VERSION_BASE8=$((MINOR_VERSION+1))

  if [ $OLD_MINOR_VERSION -lt 10 ]; then
	OLD_MINOR_VERSION="0${OLD_MINOR_VERSION}"
  else
	OLD_MINOR_VERSION="${OLD_MINOR_VERSION}"
  fi

  if [ $NEW_MINOR_VERSION -lt 10 ]; then
	NEW_MINOR_VERSION="0${NEW_MINOR_VERSION}"
  else
	NEW_MINOR_VERSION="${NEW_MINOR_VERSION}"
  fi

  REPLACE="${IDENTITY_SOFTWARE_MINOR}${OLD_MINOR_VERSION_BASE8}"
  NEW="${IDENTITY_SOFTWARE_MINOR}${NEW_MINOR_VERSION_BASE8}"
  sed -i "s/$REPLACE/$NEW/" $IDENTITY_SOFTWARE_PATH

  ### PATCH VERSION
  OLD_PATCH_VERSION=${PATCH_VERSION}
  NEW_PATCH_VERSION=0

  OLD_PATCH_VERSION_BASE8=${PATCH_VERSION}
  NEW_PATCH_VERSION_BASE8=0

  if [ $OLD_PATCH_VERSION -lt 10 ]; then
	OLD_PATCH_VERSION="0${OLD_PATCH_VERSION}"
  else
	OLD_PATCH_VERSION="${OLD_PATCH_VERSION}"
  fi

  if [ $NEW_PATCH_VERSION -lt 10 ]; then
	NEW_PATCH_VERSION="0${NEW_PATCH_VERSION}"
  else
	NEW_PATCH_VERSION="{NEW_PATCH_VERSION}"
  fi

  REPLACE="${IDENTITY_SOFTWARE_PATCH}${OLD_PATCH_VERSION_BASE8}"
  NEW="${IDENTITY_SOFTWARE_PATCH}${NEW_PATCH_VERSION_BASE8}"
  sed -i "s/$REPLACE/$NEW/" $IDENTITY_SOFTWARE_PATH

  ### BUILD VERSION
  OLD_BUILD_VERSION=${BUILD_VERSION}
  NEW_BUILD_VERSION=$((BUILD_VERSION+1))

  OLD_BUILD_VERSION_BASE8=${BUILD_VERSION}
  NEW_BUILD_VERSION_BASE8=$((BUILD_VERSION+1))

  if [ $OLD_BUILD_VERSION -lt 10 ]; then
	OLD_BUILD_VERSION="00${OLD_BUILD_VERSION}"
  elif [ $OLD_BUILD_VERSION -lt 100 ]; then
	OLD_BUILD_VERSION="0${OLD_BUILD_VERSION}"
  else
	OLD_BUILD_VERSION="${OLD_BUILD_VERSION}"
  fi

  if [ $NEW_BUILD_VERSION -lt 10 ]; then
	NEW_BUILD_VERSION="00${NEW_BUILD_VERSION}"
  elif [ $NEW_BUILD_VERSION -lt 100 ]; then
	NEW_BUILD_VERSION="0${NEW_BUILD_VERSION}"
  else
	NEW_BUILD_VERSION="${NEW_BUILD_VERSION}"
  fi

  REPLACE="${IDENTITY_SOFTWARE_BUILD}${OLD_BUILD_VERSION_BASE8}"
  NEW="${IDENTITY_SOFTWARE_BUILD}${NEW_BUILD_VERSION_BASE8}"
  sed -i "s/$REPLACE/$NEW/" $IDENTITY_SOFTWARE_PATH

  ### CMAKE VERSION
  REPLACE="v${OLD_MAJOR_VERSION}.${OLD_MINOR_VERSION}.${OLD_PATCH_VERSION} Build ${OLD_BUILD_VERSION}"
  NEW="v${NEW_MAJOR_VERSION}.${NEW_MINOR_VERSION}.${NEW_PATCH_VERSION} Build ${NEW_BUILD_VERSION}"
  sed -i "s/$REPLACE/$NEW/" $CMAKE_PATH

  REPLACE="PROJECT('Autonomy_Software' VERSION ${OLD_MAJOR_VERSION}.${OLD_MINOR_VERSION}.${OLD_PATCH_VERSION})"
  NEW="PROJECT('Autonomy_Software' VERSION ${NEW_MAJOR_VERSION}.${NEW_MINOR_VERSION}.${NEW_PATCH_VERSION})"
  sed -i "s/$REPLACE/$NEW/" $CMAKE_PATH

  ### SHELL VERSION
  REPLACE="${SHELL_MINOR}${OLD_MINOR_VERSION_BASE8}"
  NEW="${SHELL_MINOR}${NEW_MINOR_VERSION_BASE8}"
  sed -i "s/$REPLACE/$NEW/" $SHELL_PATH

  REPLACE="${SHELL_PATCH}${OLD_PATCH_VERSION_BASE8}"
  NEW="${SHELL_PATCH}${NEW_PATCH_VERSION_BASE8}"
  sed -i "s/$REPLACE/$NEW/" $SHELL_PATH

  REPLACE="${SHELL_BUILD}${OLD_BUILD_VERSION_BASE8}"
  NEW="${SHELL_BUILD}${NEW_BUILD_VERSION_BASE8}"
  sed -i "s/$REPLACE/$NEW/" $SHELL_PATH

elif [ "$branch" == 'development' ]; then
  ### MAJOR VERSION
  OLD_MAJOR_VERSION=${MAJOR_VERSION}
  NEW_MAJOR_VERSION=${MAJOR_VERSION}

  OLD_MAJOR_VERSION_BASE8=${MAJOR_VERSION}
  NEW_MAJOR_VERSION_BASE8=${MAJOR_VERSION}

  if [ $OLD_MAJOR_VERSION -lt 10 ]; then
	OLD_MAJOR_VERSION="0${OLD_MAJOR_VERSION}"
  else
	OLD_MAJOR_VERSION="${OLD_MAJOR_VERSION}"
  fi

  if [ $NEW_MAJOR_VERSION -lt 10 ]; then
	NEW_MAJOR_VERSION="0${NEW_MAJOR_VERSION}"
  else
	NEW_MAJOR_VERSION="${NEW_MAJOR_VERSION}"
  fi

  ### MINOR VERSION
  OLD_MINOR_VERSION=${MINOR_VERSION}
  NEW_MINOR_VERSION=${MINOR_VERSION}

  OLD_MINOR_VERSION_BASE8=${MINOR_VERSION}
  NEW_MINOR_VERSION_BASE8=${MINOR_VERSION}

  if [ $OLD_MINOR_VERSION -lt 10 ]; then
	OLD_MINOR_VERSION="0${OLD_MINOR_VERSION}"
  else
	OLD_MINOR_VERSION="${OLD_MINOR_VERSION}"
  fi

  if [ $NEW_MINOR_VERSION -lt 10 ]; then
	NEW_MINOR_VERSION="0${NEW_MINOR_VERSION}"
  else
	NEW_MINOR_VERSION="${NEW_MINOR_VERSION}"
  fi

  ### PATCH VERSION
  OLD_PATCH_VERSION=${PATCH_VERSION}
  NEW_PATCH_VERSION=$((PATCH_VERSION+1))

  OLD_PATCH_VERSION_BASE8=${PATCH_VERSION}
  NEW_PATCH_VERSION_BASE8=$((PATCH_VERSION+1))

  if [ $OLD_PATCH_VERSION -lt 10 ]; then
	OLD_PATCH_VERSION="0${OLD_PATCH_VERSION}"
  else
	OLD_PATCH_VERSION="${OLD_PATCH_VERSION}"
  fi

  if [ $NEW_PATCH_VERSION -lt 10 ]; then
	NEW_PATCH_VERSION="0${NEW_PATCH_VERSION}"
  else
	NEW_PATCH_VERSION="{NEW_PATCH_VERSION}"
  fi

  REPLACE="${IDENTITY_SOFTWARE_PATCH}${OLD_PATCH_VERSION_BASE8}"
  NEW="${IDENTITY_SOFTWARE_PATCH}${NEW_PATCH_VERSION_BASE8}"
  sed -i "s/$REPLACE/$NEW/" $IDENTITY_SOFTWARE_PATH

  ### BUILD VERSION
  OLD_BUILD_VERSION=${BUILD_VERSION}
  NEW_BUILD_VERSION=$((BUILD_VERSION+1))

  OLD_BUILD_VERSION_BASE8=${BUILD_VERSION}
  NEW_BUILD_VERSION_BASE8=$((BUILD_VERSION+1))

  if [ $OLD_BUILD_VERSION -lt 10 ]; then
	OLD_BUILD_VERSION="00${OLD_BUILD_VERSION}"
  elif [ $OLD_BUILD_VERSION -lt 100 ]; then
	OLD_BUILD_VERSION="0${OLD_BUILD_VERSION}"
  else
	OLD_BUILD_VERSION="${OLD_BUILD_VERSION}"
  fi

  if [ $NEW_BUILD_VERSION -lt 10 ]; then
	NEW_BUILD_VERSION="00${NEW_BUILD_VERSION}"
  elif [ $NEW_BUILD_VERSION -lt 100 ]; then
	NEW_BUILD_VERSION="0${NEW_BUILD_VERSION}"
  else
	NEW_BUILD_VERSION="${NEW_BUILD_VERSION}"
  fi

  REPLACE="${IDENTITY_SOFTWARE_BUILD}${OLD_BUILD_VERSION_BASE8}"
  NEW="${IDENTITY_SOFTWARE_BUILD}${NEW_BUILD_VERSION_BASE8}"
  sed -i "s/$REPLACE/$NEW/" $IDENTITY_SOFTWARE_PATH

  ### CMAKE VERSION
  REPLACE="v${OLD_MAJOR_VERSION}.${OLD_MINOR_VERSION}.${OLD_PATCH_VERSION} Build ${OLD_BUILD_VERSION}"
  NEW="v${NEW_MAJOR_VERSION}.${NEW_MINOR_VERSION}.${NEW_PATCH_VERSION} Build ${NEW_BUILD_VERSION}"
  sed -i "s/$REPLACE/$NEW/" $CMAKE_PATH

  REPLACE="PROJECT('Autonomy_Software' VERSION ${OLD_MAJOR_VERSION}.${OLD_MINOR_VERSION}.${OLD_PATCH_VERSION})"
  NEW="PROJECT('Autonomy_Software' VERSION ${NEW_MAJOR_VERSION}.${NEW_MINOR_VERSION}.${NEW_PATCH_VERSION})"
  sed -i "s/$REPLACE/$NEW/" $CMAKE_PATH

  ### SHELL VERSION
  REPLACE="${SHELL_PATCH}${OLD_PATCH_VERSION_BASE8}"
  NEW="${SHELL_PATCH}${NEW_PATCH_VERSION_BASE8}"
  sed -i "s/$REPLACE/$NEW/" $SHELL_PATH

  REPLACE="${SHELL_BUILD}${OLD_BUILD_VERSION_BASE8}"
  NEW="${SHELL_BUILD}${NEW_BUILD_VERSION_BASE8}"
  sed -i "s/$REPLACE/$NEW/" $SHELL_PATH
fi
